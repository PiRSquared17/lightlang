from PyQt4 import Qt
import dbus
import subprocess
import Button
import PopupWindow
import Const
import TreeWidget
import FstabFile
import DiskWidget
import VolumeWidget
import MountDialog
import InfoCenter

class CentralWidget(Qt.QSplitter):
	def __init__(self,parent = None):
		### This widget is a central part of a program ###
		Qt.QSplitter.__init__(self,parent)
		
		self.log_file = open(str(Qt.QDir.homePath()) + "/" + Const.Program_name + ".log","w")
		self.log = "="*80 + "\n" + "="*13 + "MountManager.log generated by MountManager to fix bugs" + "="*13 + "\n" + "="*80 + "\n"
		
		self.info_center = InfoCenter.InfoCenter()
		
		self.doc_center = self.info_center.getDocCenter()
		
		# Mount Dialog
		
		self.mount_dialog = MountDialog.MountDialog(self)
		
		# Popup window
		self.popup_window = PopupWindow.PopupWindow(self.doc_center)
		
		# Left widget
		
		self.left_widget = Qt.QWidget()
				
			# Refresh button
		self.refresh_button = Qt.QPushButton()
		self.refresh_button.setText(self.tr("Refresh"))
		self.connect(self.refresh_button,Qt.SIGNAL("clicked()"),self.refreshListOfDevices)
			
			# Tree widget
		self.tree_widget = self.info_center.treeWidget()
		self.connect(self.tree_widget,Qt.SIGNAL("itemDoubleClicked(QTreeWidgetItem*,int)"),self.itemClickedSlot)
		self.connect(self.tree_widget,Qt.SIGNAL("currentItemChanged(QTreeWidgetItem*,QTreeWidgetItem*)"),self.changePage)	
		self.connect(self.tree_widget,Qt.SIGNAL("showInfoSignal(QTreeWidgetItem*,int)"),self.itemClickedSlot)
		self.connect(self.tree_widget,Qt.SIGNAL("mountPartitionSignal(QTreeWidgetItem*)"),self.mount)
		self.connect(self.tree_widget,Qt.SIGNAL("unmountPartitionSignal(QTreeWidgetItem*)"),self.unmount)
			
			# Check box to show enable showing of system partitions
		self.show_system_partitions = Qt.QCheckBox(self.tr("Show system partitions"))
		self.connect(self.show_system_partitions,Qt.SIGNAL("toggled(bool)"),self.showSystemPartitions)
		
			# Left layout
		self.left_layout = Qt.QVBoxLayout()
		self.left_layout.addWidget(self.tree_widget)
		self.left_layout.addWidget(self.show_system_partitions)
		self.left_layout.addWidget(self.refresh_button)
		
		self.left_widget.setLayout(self.left_layout)
		
		# Right widget
		
		self.right_widget = Qt.QWidget()
		
			# Stacked widget
		self.stacked_widget = Qt.QStackedWidget()
					
			# Right layout
		self.right_layout = Qt.QVBoxLayout()
		self.right_layout.addWidget(self.stacked_widget)
		
		self.right_widget.setLayout(self.right_layout)
		
		# Add widgets
		
		self.addWidget(self.left_widget)
		self.addWidget(self.right_widget)
		
		# Init vars
		self.physical_disks = []
		self.logical_disks = []
		
		# First actions
		
		
		self.refreshListOfDevices()
		self.setStretchFactor(1,1)
		
		
	def refreshListOfDevices(self):
		### Create a list of devices as tree ###
		
		self.log = ""
		self.tree_widget_items = []
		self.tree_widget.clear()
		while self.stacked_widget.count() != 0:
			self.stacked_widget.removeWidget(self.stacked_widget.widget(self.stacked_widget.count()-1))
			
		self.info_center.refreshInformation()
		self.tree_widget_items = self.info_center.treeWidgetItems()
		
		self.createAllWidgets()
		
		# Hide or show system partitions
		self.showSystemPartitions(self.show_system_partitions.isChecked())
		self.tree_widget.expandAll()
		self.tree_widget.setCurrentItem(self.tree_widget_items[0])
		
	def itemClickedSlot(self,item,column):
		### After pressing of item of tree widget ###
			# Define popup title
		
		popup_title = ""
		if item.isLogical():
			popup_title = self.tr("Logical")
		else:
			popup_title = self.tr("Physical")
		if item.isSystem():
			popup_title += " " + self.tr("system")
		popup_title += " " + self.tr("disk")
		
		popup_title += " " + item.getDeviceName()
		
		# Define popup text
		popup_text = ""
		if item.isSystem():
			popup_text += self.tr("This partition is system. Be attention in changing of options") + ".<br>"
		
		if item.isMounted() != None:
			popup_text += "<b>" + self.tr("Status") + ":</b> "
			if item.isMounted():
				popup_text += self.tr("mounted")
			else:
				popup_text += self.tr("unmounted")
			popup_text += "<br>"
		
		if item.getType() != None:
			popup_text += "<b>" + self.tr("Type") + ":</b> " + item.getType() + "<br>"
			
		if item.getFileSystem() != None:
			popup_text += "<b>" + self.tr("File system") + ":</b> " + item.getFileSystem() + "<br>"
			
		if item.getMountPoint() != None:
			if item.getMountPoint() == "/":
				popup_text += "<b>" + self.tr("Mount point") + ":</b> " + self.tr("root directory") + "<br>"
			else:
				popup_text += "<b>" + self.tr("Mount point") + ":</b> " + item.getMountPoint() + "<br>"
				
		self.popup_window.setData(popup_title,popup_text,400,200)
			
	def showSystemPartitions(self,bool):
		### Show or hide system partitions ###
		for item in self.tree_widget_items:
			if item.isSystem():
				item.setHidden(not bool)
				# Hide physical disks if all logical disks of this disk is hidden
				parent_item = item.parent()
				for index in range(parent_item.childCount()):
					 if not parent_item.child(index).isHidden():
						 parent_item.setHidden(False)
						 break
		  		else:
					parent_item.setHidden(True)
		self.tree_widget.expandAll()
		
	def changePage(self,current,previous):
		
		if current != None:
			current = previous
			
		self.stacked_widget.setCurrentIndex(current.getIndex())
	
	def changePage(self,current):
		
		if current != None:
			self.tree_widget.setCurrentItem(current)
			self.stacked_widget.setCurrentIndex(current.getIndex())
		
	#def saveSettings(self):
		
	#	self.
	#	self.saveLogFile()
	
	def saveLogFile(self):
					
		self.log += "="*15 + "Fstab file" + "="*15 + "\n" + FstabFile.getFstabContent() + "\n"
		# Write output of the program "lshal"
		self.log += "="*15 + "LsHal" + "="*15 + "\n"
		# Get path to lshal:
		lshal_pipe = subprocess.Popen(["/usr/bin/lshal"], stdout=subprocess.PIPE, stderr=subprocess.PIPE).stdout
		lshal_lines = lshal_pipe.readlines()
		for line in lshal_lines:
			self.log += line
		self.log_file.write(self.log)
	
	def createAllWidgets(self):
		### Add widgets to stacked widget ###
		
		for item in self.tree_widget_items:
			# If item hasn't parent - it's a physical disk 
			if item.parent() == None: 
				if item.childCount() > 0:
					self.last_physical_disk = DiskWidget.DiskWidget(item)
					self.stacked_widget.addWidget(self.last_physical_disk)
					self.connect(self.last_physical_disk,Qt.SIGNAL("changeCurrentPage(QTreeWidgetItem*)"),self.changePage)
				elif item.isRemovable():
					self.stacked_widget.addWidget(VolumeWidget.VolumeWidget(item,self.popup_window))
				else:
					self.last_physical_disk = DiskWidget.DiskWidget(item)
					self.stacked_widget.addWidget(self.last_physical_disk)
			else:
				self.last_physical_disk.addVolume(item)
				self.stacked_widget.addWidget(VolumeWidget.VolumeWidget(item,self.popup_window))
				
	def mount(self,item):
		### Mount partition which is situated on item ###
		
		self.mount_dialog.showDialog(item.getDeviceName(),item.isSystem(),self.stacked_widget.widget(item.getIndex()).getMountOptions())
		
		
	def unmount(self,item):
		
		self.mount_dialog.showDialog(item.getDeviceName(),item.isSystem(),self.stacked_widget.widget(item.getIndex()).getMountOptions())
					
	def setExpertMode(self,b):
		
		for index in range(self.stacked_widget.count()):
			self.stacked_widget.widget(index).setExpertMode(b)
		
		self.show_system_partitions.setChecked(b)
		